def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    def func4(arg7, arg8):
        var9 = 681676158 & (var6 ^ (var6 - (884 | 596853468))) + arg2 + arg2
        result = ((arg7 + arg7 + var9) - arg8) | (arg1 ^ arg8 ^ (1695482940 ^ 1796632149 & 792) + arg1 | arg8 - arg8)
        return result
    var10 = func4(var6, arg2)
    var15 = func5(var6, var10)
    var20 = func6(arg2, var15)
    var47 = var23(arg1, arg2)
    var48 = (((var20 | (arg1 ^ arg2 | (-218283015 | (var20 - ((-1041624917 + (var6 & (var6 ^ ((var15 ^ arg2) + var15 | (-110 ^ (var15 - var6))) ^ var47 + arg1))) ^ var6 | arg2)))) ^ var10) & -1634761251) ^ arg1) ^ 1665844347
    var49 = (var6 | var6) & ((var48 ^ (arg1 & 579)) ^ var20 | var10 - ((var47 ^ var48) ^ var15))
    result = var6 + arg2
    return result
def func9(arg24, arg25):
    var26 = -711 | -347
    if arg25 < arg25:
        var27 = var26 | (arg24 + var26 + 1108350677)
    else:
        var27 = ((arg24 | var26) - arg24) ^ 661
    if arg25 < arg25:
        var28 = var26 ^ arg24
    else:
        var28 = var26 - arg25
    if arg24 < arg25:
        var29 = 21 | var26
    else:
        var29 = -573 ^ (var26 & var26 & arg24)
    var30 = arg24 & arg25 ^ -152907660
    var31 = arg25 ^ (-1769734486 - var30) & arg24
    if arg25 < var31:
        var32 = var26 - (arg24 | 1245403026) + arg25
    else:
        var32 = 1067685516 & 566
    var33 = 634 + var31 & var31 | arg24
    var34 = -1268301567 ^ var30
    var35 = var26 - var34 | (var31 & arg25)
    var36 = ((var34 - 409) & 1003207744) ^ -1835748814
    var37 = var34 | var31
    var38 = 691732215 - (var35 & arg25)
    var39 = var31 + var35 - -1256033986 + -1509881117
    if var36 < var37:
        var40 = 151 - var37 + var35 + -1357552161
    else:
        var40 = (var33 & (300 + arg25)) - var33
    var41 = var37 & var38
    var42 = var37 | var41
    var43 = ((arg25 ^ var36) - var37) & var38
    var44 = ((var37 ^ var43) & var39) + var37
    var45 = var34 + 1829648220 + var34 & var35
    var46 = var42 ^ var26
    result = arg24 ^ var31
    return result
def func8():
    closure = [3]
    def func7(arg21, arg22):
        closure[0] += func9(arg21, arg22)
        return closure[0]
    func = func7
    return func
var23 = func8()
def func6(arg16, arg17):
    var18 = 0
    for var19 in range(25):
        if arg17 < arg17:
            var18 += var19 + (var18 ^ 9)
        else:
            var18 += var19 ^ (3 - var18)
    return var18
def func5(arg11, arg12):
    var13 = 0
    for var14 in xrange(24):
        var13 += var14 & var14 & arg11
    return var13
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = 1 | (rest ^ 4)
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 50'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
